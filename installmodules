#!/bin/bash
# installmodules -- Install the nlpp modules
# installs modules in subdir nlppmodules of the directory from which this script is started.
# Presupposes git
# 20170905 Paul Huygen
# 20180507 Paul Huygen
thisdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
res=0

function update_res () {
    tres=$1
    if
	[ $tres -gt 0 ]
    then
	res=tres
    fi
    
}

function handle_failure () {
    errmess=$1
    if
	[ $res -gt 0 ]
    then
	echo $errmess > &2
	exit 4
    fi

source $thisdir/source
mkdir -p $modulesdir

# Occasionally cloning from git fails, but the failure is not reproducible. Therefore, repeat cloning if it fails.

# Clone from Github and perform install script in the root dir of the clone
# Github cloning may fail occasionally. Therefore, retry (max. maxtrials times) if it fails.
# Args:
# reponame: name of reposistory (module)
# repourl: Github url of the repository
# commitset: commitset of the version of the module that we need.
function install_from_git () {
    local reponame=$1
    local repourl=$2
    local commitset=$3
    local maxtrialses=10
    local tres=0
    local trial=0
    local go_on=0
    cd ${modulesdir}
    while
	[ $go_on == 0 ]
    do
 	git clone $repourl
	tres=$?
	if
	    [ $tres == 0 ]
	then
	    cd $reponame
	    git checkout $commitset
	    update_res $?
	    if
		[ -x "./install" ]
	    then
		./install
	        update_res $?
	    fi
	    go_on=1
	else
	    trial=$((trial+1))
	    if
		[ $trial -ge $maxtrials ]
	    then
		go_on=1
		echo "GIT FAIL: cloning of $repourl failed $maxtrials times" >&2
		exit 4
	    fi
	fi
    done
    handle_failure "Cannot install module $reponame from Github"
    cd ${modulesdir}
}


function  install_from_repo {
  local modulename=$1
  local ball=$2
  cd ${modulesdir}
  update_res $?
  if
      [ ! -e $repodir/$ball ]
  then
      echo "Cannot $modulename from $ball" >&2
      exit 4
  fi
  echo "Install $modulename from $ball" >&2
  tar -xzf ${repodir}/${ball}
  update_res $?
# rm ${ball}
  cd ${modulesdir}/${modulename}
  update_res $?
  if
  	  [ -e install ]
  then
  	  ./install &>./install.log
  	  update_res $?
  fi
  cd ${modulesdir}
  handle_failure "Cannot install $modulename from repo"
}

#
# Do the work
#
while
  IFS=' ' read -ra args
do
    export modulename="${args[0]}"
    installmethod="${args[1]}"
    if
	[ -d ${modulesdir}/${modulename} ]
    then
	echo "Not re-installing existing ${modulename}" >&2
	continue
    fi
    if
	[ "${installmethod}" == "GIT" ]
    then
        export url="${args[2]}"
	export commitset="${args[3]}"
	( install_from_git ${modulename} ${url} ${commitset} )
    else
	export ball="${args[2]}"
	echo "Install $modulename from secret repo" >&2
	( install_from_repo ${modulename} ${ball} )
    fi
done
wait

